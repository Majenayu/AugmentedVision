import React, { useState } from 'react';

interface AssessmentReportProps {
  recordingData: Array<{
    timestamp: number;
    rulaScore: any;
    imageData: string;
    poseData: any;
    weightEstimation?: any;
    adjustedRulaScore?: any;
    hasObject?: boolean;
  }>;
  manualWeights: Array<{
    id: string;
    name: string;
    weight: number;
    icon: string;
    previewImage?: string;
  }>;
  sessionDuration: string;
  analysisMode: string;
  isVisible: boolean;
  onClose: () => void;
}

export default function AssessmentReport({
  recordingData,
  manualWeights,
  sessionDuration,
  analysisMode,
  isVisible,
  onClose
}: AssessmentReportProps) {
  const [selectedImage, setSelectedImage] = useState<string | null>(null);

  if (!isVisible || recordingData.length === 0) return null;

  // Calculate session statistics
  const sessionDate = new Date().toLocaleString();
  const totalFrames = recordingData.length;
  
  // Calculate average pose detection quality
  const validKeypoints = recordingData.map(frame => 
    frame.poseData?.keypoints?.filter((kp: any) => kp.score > 0.3).length || 0
  );
  const avgValidKeypoints = validKeypoints.reduce((a, b) => a + b, 0) / validKeypoints.length;
  const avgConfidence = Math.round((avgValidKeypoints / 17) * 100);

  // Get representative RULA scores
  const finalFrame = recordingData[recordingData.length - 1];
  const currentRulaScore = analysisMode === 'manual' && finalFrame.adjustedRulaScore 
    ? finalFrame.adjustedRulaScore 
    : finalFrame.rulaScore;

  // Generate recommendations based on RULA score
  const generateRecommendations = (rulaScore: any) => {
    const score = rulaScore?.finalScore || 1;
    const recommendations = [];

    if (score <= 2) {
      recommendations.push("Posture is acceptable");
      recommendations.push("Continue current practices");
      recommendations.push("Monitor for any changes in work conditions");
    } else if (score <= 4) {
      recommendations.push("Minor ergonomic concerns detected");
      recommendations.push("Adjust chair height and monitor position");
      recommendations.push("Check keyboard and mouse placement");
      recommendations.push("Take micro-breaks every 20-30 minutes");
    } else if (score <= 6) {
      recommendations.push("Immediate ergonomic intervention required");
      recommendations.push("Redesign workstation setup");
      recommendations.push("Consider ergonomic training");
      recommendations.push("Implement frequent break schedule");
    } else {
      recommendations.push("Critical ergonomic risk identified");
      recommendations.push("Stop current activity immediately");
      recommendations.push("Seek ergonomic professional consultation");
      recommendations.push("Redesign entire work process");
    }

    if (manualWeights.length > 0) {
      const totalWeight = manualWeights.reduce((total, w) => total + w.weight, 0) / 1000;
      recommendations.push(`Weight handling detected: ${totalWeight.toFixed(1)}kg`);
      if (totalWeight > 10) {
        recommendations.push("Consider mechanical lifting aids");
        recommendations.push("Use proper lifting techniques");
      }
    }

    return recommendations;
  };

  const getRiskLevel = (score: number) => {
    if (score <= 2) return { level: "Low Risk", color: "text-green-400" };
    if (score <= 4) return { level: "Medium Risk", color: "text-yellow-400" };
    if (score <= 6) return { level: "High Risk", color: "text-orange-400" };
    return { level: "Critical Risk", color: "text-red-400" };
  };

  const riskInfo = getRiskLevel(currentRulaScore?.finalScore || 1);

  // Get sample images from recording
  const sampleImages = recordingData.filter((_, index) => index % Math.floor(recordingData.length / 4) === 0).slice(0, 4);

  const downloadReport = () => {
    const reportContent = `
ErgoTrack Assessment Report

Session Information
Date: ${sessionDate}
Duration: ${sessionDuration}
Assessment Type: ${analysisMode.toUpperCase()}

Pose Detection Quality
Total Keypoints: 17
Valid Keypoints: ${Math.round(avgValidKeypoints)}
Detection Confidence: ${avgConfidence}%

RULA Assessment Results
Score: ${currentRulaScore?.finalScore || 1}
Risk Level: ${riskInfo.level}

Individual Body Part Scores:
Upper Arm: ${currentRulaScore?.upperArm || 1}
Lower Arm: ${currentRulaScore?.lowerArm || 1}
Wrist: ${currentRulaScore?.wrist || 1}
Neck: ${currentRulaScore?.neck || 1}
Trunk: ${currentRulaScore?.trunk || 1}

${manualWeights.length > 0 ? `Manual Weight Objects:
${manualWeights.map(w => `- ${w.name}: ${w.weight}g`).join('\n')}
Total Weight: ${(manualWeights.reduce((total, w) => total + w.weight, 0) / 1000).toFixed(1)}kg` : ''}

Recommendations:
${generateRecommendations(currentRulaScore).map((rec, i) => `${i + 1}. ${rec}`).join('\n')}

Generated by ErgoTrack on ${sessionDate}
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ErgoTrack_Report_${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-dark-card rounded-lg shadow-lg p-6 max-w-6xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold text-center">ErgoTrack Assessment Report</h2>
          <div className="flex space-x-2">
            <button
              onClick={downloadReport}
              className="bg-green-600 hover:bg-green-700 px-4 py-2 rounded-lg transition-colors flex items-center space-x-2"
            >
              <span className="material-icon">download</span>
              <span>Download Report</span>
            </button>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-white"
            >
              <span className="material-icon">close</span>
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Left Column - Report Data */}
          <div className="space-y-6">
            {/* Session Information */}
            <div className="bg-dark-secondary rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-3 text-blue-400">Session Information</h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>Date:</span>
                  <span>{sessionDate}</span>
                </div>
                <div className="flex justify-between">
                  <span>Duration:</span>
                  <span>{sessionDuration}</span>
                </div>
                <div className="flex justify-between">
                  <span>Assessment Type:</span>
                  <span className="uppercase">{analysisMode}</span>
                </div>
                <div className="flex justify-between">
                  <span>Total Frames:</span>
                  <span>{totalFrames}</span>
                </div>
              </div>
            </div>

            {/* Pose Detection Quality */}
            <div className="bg-dark-secondary rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-3 text-green-400">Pose Detection Quality</h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>Total Keypoints:</span>
                  <span>17</span>
                </div>
                <div className="flex justify-between">
                  <span>Valid Keypoints:</span>
                  <span>{Math.round(avgValidKeypoints)}</span>
                </div>
                <div className="flex justify-between">
                  <span>Detection Confidence:</span>
                  <span>{avgConfidence}%</span>
                </div>
              </div>
            </div>

            {/* RULA Assessment Results */}
            <div className="bg-dark-secondary rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-3 text-purple-400">RULA Assessment Results</h3>
              <div className="mb-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-2xl font-bold">Score: {currentRulaScore?.finalScore || 1}</span>
                  <span className={`font-semibold ${riskInfo.color}`}>{riskInfo.level}</span>
                </div>
              </div>
              
              <div className="space-y-2 text-sm">
                <h4 className="font-medium mb-2">Individual Body Part Scores:</h4>
                <div className="grid grid-cols-2 gap-2">
                  <div>Upper Arm: {currentRulaScore?.upperArm || 1}</div>
                  <div>Lower Arm: {currentRulaScore?.lowerArm || 1}</div>
                  <div>Wrist: {currentRulaScore?.wrist || 1}</div>
                  <div>Neck: {currentRulaScore?.neck || 1}</div>
                  <div>Trunk: {currentRulaScore?.trunk || 1}</div>
                </div>
              </div>
            </div>

            {/* Manual Weight Objects */}
            {manualWeights.length > 0 && (
              <div className="bg-dark-secondary rounded-lg p-4">
                <h3 className="text-lg font-semibold mb-3 text-orange-400">Manual Weight Objects</h3>
                <div className="space-y-2 text-sm">
                  {manualWeights.map((weight, index) => (
                    <div key={index} className="flex justify-between">
                      <span>{weight.name}:</span>
                      <span>{weight.weight}g</span>
                    </div>
                  ))}
                  <div className="border-t border-gray-600 pt-2 mt-2">
                    <div className="flex justify-between font-semibold">
                      <span>Total Weight:</span>
                      <span>{(manualWeights.reduce((total, w) => total + w.weight, 0) / 1000).toFixed(1)}kg</span>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Recommendations */}
            <div className="bg-dark-secondary rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-3 text-yellow-400">Recommendations</h3>
              <ol className="list-decimal list-inside space-y-1 text-sm">
                {generateRecommendations(currentRulaScore).map((rec, index) => (
                  <li key={index}>{rec}</li>
                ))}
              </ol>
            </div>
          </div>

          {/* Right Column - Images */}
          <div className="space-y-6">
            <div className="bg-dark-secondary rounded-lg p-4">
              <h3 className="text-lg font-semibold mb-3 text-indigo-400">Session Images</h3>
              
              {/* Main Selected Image */}
              <div className="mb-4">
                <div className="relative w-full aspect-video bg-black rounded-lg overflow-hidden">
                  <img 
                    src={selectedImage || sampleImages[0]?.imageData} 
                    alt="Assessment frame"
                    className="w-full h-full object-contain"
                  />
                  <div className="absolute top-2 left-2 bg-black/70 text-white px-2 py-1 rounded text-xs">
                    Main Assessment Frame
                  </div>
                </div>
              </div>

              {/* Thumbnail Grid */}
              <div className="grid grid-cols-2 gap-2">
                {sampleImages.map((frame, index) => (
                  <button
                    key={index}
                    onClick={() => setSelectedImage(frame.imageData)}
                    className={`relative aspect-video rounded overflow-hidden border-2 transition-colors ${
                      selectedImage === frame.imageData ? 'border-blue-500' : 'border-gray-600 hover:border-gray-400'
                    }`}
                  >
                    <img 
                      src={frame.imageData} 
                      alt={`Frame ${index + 1}`}
                      className="w-full h-full object-cover"
                    />
                    <div className="absolute bottom-1 left-1 bg-black/70 text-white px-1 py-0.5 rounded text-xs">
                      Frame {index + 1}
                    </div>
                    {frame.hasObject && (
                      <div className="absolute top-1 right-1 bg-red-500 text-white px-1 py-0.5 rounded text-xs">
                        OBJ
                      </div>
                    )}
                  </button>
                ))}
              </div>

              {/* Image Legend */}
              <div className="mt-4 text-xs text-gray-400">
                <p>Click thumbnails to view different frames from your assessment session.</p>
                <p>OBJ indicates frames where objects were detected.</p>
              </div>
            </div>

            {/* Footer */}
            <div className="text-center text-xs text-gray-500 pt-4 border-t border-gray-600">
              Generated by ErgoTrack on {sessionDate}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}